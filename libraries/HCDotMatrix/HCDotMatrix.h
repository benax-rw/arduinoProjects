/* FILE:    HCDotMatrix.h
   DATE:    05/09/17
   VERSION: 2.0
   AUTHOR:  Andrew Davies
   WEBSITE: HobbyComponents.com


21/01/16 V0.1: Original version
05/09/17 V2.0: New version - complete rewrite of previous version.
		 	   Now refreshes the screen in the background using timer interrupt 2.
			   UpdateMatrix() function removed as no longer required.
			   Added init() function (must be run once at beginning of sketch).
			   print() function now supports printing of floating point numbers.
			   Added printChar() function allowing printing of single ASCII characters.
			   Added clear() function to clear the module buffer and display.
			   Added setLED() function to turn on an individual LED from an X/Y coordinate.
			   Added clearLED() function to turn off an individual LED from an X/Y coordinate.
			   Added getLED() function to get the current state of one of the modules LEDs.
			   Added invert() function to reverse the state of the LEDs.
					  

Library for driving 8x8 LED dot matrix modules. This Arduino library was written
to support the following Hobby Components product(s):

8x8 Red LED Matrix Module (HCOPTO0011)
8x8 Mini 20mm 8x8 Red LED Matrix (HCOPTO0067)

More information about this library can be found in the software section of our support 
forum here:

http://forum.hobbycomponents.com/software


You may copy, alter and reuse this code in any way you like, but please leave
reference to HobbyComponents.com in your comments if you redistribute this code.
This software may not be used directly for the purpose of selling products that
directly compete with Hobby Components Ltd's own range of products.
THIS SOFTWARE IS PROVIDED "AS IS". HOBBY COMPONENTS MAKES NO WARRANTIES, WHETHER
EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ACCURACY OR LACK OF NEGLIGENCE.
HOBBY COMPONENTS SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR ANY DAMAGES,
INCLUDING, BUT NOT LIMITED TO, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY
REASON WHATSOEVER.
*/



#ifndef HCDotMatrix_h
#define HCDotMatrix_h

#include "Arduino.h"



/******************************************************************************
								USER SETTINGS
******************************************************************************/

/* This library can drive more than one module by creating an instance of the 
library for each module. If you are creating more than instance you will need 
to change the following value to match the amount of instances created:  */

#define MAXMODULES 1

/* If you are not using the library to print text and numbers then you can save 
   memory by commenting out the following line: */

#define ENABLEFONT

/******************************************************************************/


#define COMMON_CATHODE false
#define COMMON_ANODE true

/* Structure used to store port and bit mask information for each row and 
   column pin */
struct PinInfo
{ 
   volatile uint8_t* Port; 
   uint8_t Mask; 
}; 



#ifdef ENABLEFONT
const char Font8x8[][8] PROGMEM = 
{ {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0xF2,0xF2,0x00,0x00,0x00},
  {0x00,0xE0,0xE0,0x00,0x00,0xE0,0xE0,0x00},
  {0x28,0xFE,0xFE,0x28,0x28,0xFE,0xFE,0x28},
  {0x00,0x24,0x74,0xD6,0xD6,0x5C,0x48,0x00},
  {0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00},
  {0x00,0x4C,0xFE,0xB2,0xB2,0xEE,0x4E,0x0A},
  {0x00,0x00,0x00,0x20,0x60,0xC0,0x80,0x00},
  {0x00,0x00,0x38,0x7C,0xC6,0x82,0x00,0x00},
  {0x00,0x00,0x82,0xC6,0x7C,0x38,0x00,0x00},
  {0x10,0x54,0x7C,0x38,0x38,0x7C,0x54,0x10},
  {0x00,0x10,0x10,0x7C,0x7C,0x10,0x10,0x00},
  {0x00,0x00,0x01,0x07,0x06,0x00,0x00,0x00},
  {0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00},
  {0x00,0x00,0x00,0x06,0x06,0x00,0x00,0x00},
  {0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0x40},
  {0x00,0x7C,0xFE,0x92,0xA2,0xFE,0x7C,0x00},
  {0x00,0x02,0x22,0xFE,0xFE,0x02,0x02,0x00},
  {0x00,0x46,0xCE,0x8A,0x92,0xF2,0x62,0x00},
  {0x00,0x44,0xC6,0x92,0x92,0xFE,0x6C,0x00},
  {0x00,0x18,0x18,0x28,0x68,0xFE,0xFE,0x08},
  {0x00,0xE4,0xE6,0xA2,0xA2,0xBE,0x9C,0x00},
  {0x00,0x7C,0xFE,0x92,0x92,0xDE,0x4C,0x00},
  {0x00,0xC0,0xC0,0x9E,0xBE,0xE0,0xC0,0x00},
  {0x00,0x6C,0xFE,0x92,0x92,0xFE,0x6C,0x00},
  {0x00,0x64,0xF6,0x92,0x92,0xFE,0x7C,0x00},
  {0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00},
  {0x00,0x00,0x01,0x27,0x26,0x00,0x00,0x00},
  {0x00,0x10,0x38,0x6C,0xC6,0x82,0x82,0x00},
  {0x00,0x28,0x28,0x28,0x28,0x28,0x28,0x00},
  {0x00,0x82,0x82,0xC6,0x6C,0x38,0x10,0x00},
  {0x00,0x40,0xC0,0x8A,0x9A,0xF0,0x60,0x00},
  {0x00,0x7C,0xFE,0x82,0xB2,0xF2,0x74,0x00},
  {0x00,0x3E,0x7E,0xD0,0xD0,0x7E,0x3E,0x00},
  {0x00,0xFE,0xFE,0x92,0x92,0xFE,0x6C,0x00},
  {0x00,0x7C,0xFE,0x82,0x82,0xC6,0x44,0x00},
  {0x00,0xFE,0xFE,0x82,0xC6,0x7C,0x38,0x00},
  {0x00,0xFE,0xFE,0x92,0x92,0x82,0x82,0x00},
  {0x00,0xFE,0xFE,0x90,0x90,0x80,0x80,0x00},
  {0x00,0x7C,0xFE,0x82,0x92,0xDE,0x5C,0x00},
  {0x00,0xFE,0xFE,0x10,0x10,0xFE,0xFE,0x00},
  {0x00,0x00,0x82,0xFE,0xFE,0x82,0x00,0x00},
  {0x00,0x04,0x06,0x82,0xFE,0xFC,0x80,0x00},
  {0x00,0xFE,0xFE,0x38,0x6C,0xC6,0x82,0x00},
  {0x00,0xFE,0xFE,0x02,0x02,0x02,0x02,0x00},
  {0x00,0xFE,0xFE,0x60,0x30,0x60,0xFE,0xFE},
  {0x00,0xFE,0xFE,0x70,0x38,0xFE,0xFE,0x00},
  {0x00,0x7C,0xFE,0x82,0x82,0xFE,0x7C,0x00},
  {0x00,0xFE,0xFE,0x90,0x90,0xF0,0x60,0x00},
  {0x00,0x78,0xFC,0x84,0x86,0xFE,0x7A,0x00},
  {0x00,0xFE,0xFE,0x98,0x9C,0xF6,0x62,0x00},
  {0x00,0x64,0xF6,0x92,0x92,0xDE,0x4C,0x00},
  {0x00,0x80,0x80,0xFE,0xFE,0x80,0x80,0x00},
  {0x00,0xFC,0xFE,0x02,0x02,0xFE,0xFC,0x00},
  {0x00,0xF8,0xFC,0x06,0x06,0xFC,0xF8,0x00},
  {0x00,0xFE,0xFE,0x0C,0x18,0x0C,0xFE,0xFE},
  {0x00,0xC6,0xEE,0x38,0x38,0xEE,0xC6,0x00},
  {0x00,0xE0,0xF0,0x1E,0x1E,0xF0,0xE0,0x00},
  {0x00,0x86,0x8E,0x9A,0xB2,0xE2,0xC2,0x00},
  {0x00,0x00,0xFE,0xFE,0x82,0x82,0x00,0x00},
  {0x00,0x40,0x60,0x30,0x18,0x0C,0x06,0x02},
  {0x00,0x00,0x82,0x82,0xFE,0xFE,0x00,0x00},
  {0x00,0x18,0x30,0x60,0xC0,0x60,0x30,0x18},
  {0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01},
  {0x00,0x00,0x80,0x40,0x20,0x00,0x00,0x00},
  {0x00,0x04,0x2E,0x2A,0x2A,0x3E,0x1E,0x00},
  {0x00,0x7E,0x7E,0x12,0x12,0x1E,0x0C,0x00},
  {0x00,0x1C,0x3E,0x22,0x22,0x22,0x00,0x00},
  {0x00,0x0C,0x1E,0x12,0x12,0x7E,0x7E,0x00},
  {0x00,0x1C,0x3E,0x2A,0x2A,0x3A,0x18,0x00},
  {0x00,0x10,0x3E,0x7E,0x50,0x50,0x00,0x00},
  {0x00,0x19,0x3D,0x25,0x25,0x3F,0x3E,0x00},
  {0x00,0x7E,0x7E,0x10,0x10,0x1E,0x0E,0x00},
  {0x00,0x00,0x12,0x5E,0x5E,0x02,0x00,0x00},
  {0x00,0x00,0x01,0x01,0x01,0x5F,0x5E,0x00},
  {0x00,0x7E,0x7E,0x08,0x1C,0x16,0x02,0x00},
  {0x00,0x00,0x42,0x7E,0x7E,0x02,0x00,0x00},
  {0x00,0x3E,0x3E,0x18,0x1C,0x38,0x3E,0x1E},
  {0x00,0x3E,0x3E,0x20,0x20,0x3E,0x1E,0x00},
  {0x00,0x1C,0x3E,0x22,0x22,0x3E,0x1C,0x00},
  {0x00,0x3F,0x3F,0x24,0x24,0x3C,0x18,0x00},
  {0x00,0x18,0x3C,0x24,0x24,0x3F,0x3F,0x00},
  {0x00,0x3E,0x3E,0x20,0x20,0x30,0x10,0x00},
  {0x00,0x12,0x3A,0x2A,0x2A,0x2E,0x24,0x00},
  {0x00,0x20,0x20,0x7C,0x7E,0x22,0x22,0x00},
  {0x00,0x3C,0x3E,0x02,0x02,0x3E,0x3E,0x00},
  {0x00,0x38,0x3C,0x06,0x06,0x3C,0x38,0x00},
  {0x00,0x38,0x3E,0x0E,0x1C,0x0E,0x3E,0x38},
  {0x00,0x22,0x36,0x1C,0x1C,0x36,0x22,0x00},
  {0x00,0x39,0x3D,0x05,0x07,0x3E,0x3C,0x00},
  {0x00,0x22,0x26,0x2E,0x3A,0x32,0x22,0x00},
  {0x00,0x00,0x10,0x7C,0xEE,0x82,0x00,0x00},
  {0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00},
  {0x00,0x00,0x82,0xEE,0x7C,0x10,0x00,0x00},
  {0x00,0x08,0x10,0x10,0x18,0x08,0x08,0x10}
};
#endif

class HCDotMatrix
{
	public:
		HCDotMatrix(byte R1,byte R2,byte R3,byte R4,byte R5,byte R6,byte R7, byte R8,
				byte C1,byte C2,byte C3,byte C4,byte C5,byte C6,byte C7, byte C8);
			  
		void init(boolean ModuleType);
		void print(char TextString[], unsigned int Offset);
		void print(float Value, unsigned int Offset = 8, byte DP = 2);
		void printChar(char Character, byte Offset = 8);
		void clear(void);
		void setLED(byte X, byte Y);
		void clearLED(byte X, byte Y);
		boolean getLED(byte X, byte Y);
		void invert(void);
	
		void refresh(void);
	
		byte Buffer[8];

  private: 
		byte _R1, _RowPos, _ColPos;
		PinInfo _Row_Pins[8], _Col_Pins[8];
		boolean _Invert = false;
};
#endif